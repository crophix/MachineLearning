from __future__ import division  #import real number division
from perceptron import *
import output

perceptrons = {}
learningRate = 0.2
output.learningRate = 0.2

def createPerceptrons():
    """Initializes the 45 perceptrons
    """
    global perceptrons
    for i in range(10):
        for j in range(i+1,10):
            perceptrons[str(i)+str(j)] = Perceptron()

def getData(fname):
    """Retrieves the training data from optdigits.train and stores
    the data in a dict sorted by the classifier
    """
    entries = {}
    for i in range(10):
        entries[i] = []
    with open(fname) as f:
        for line in f:
            index = int(line.split(',')[-1])
            entries[index].append(line.split(','))
    return entries

def runEpoch(trainingData, key):
    """This runs the training data through the given perceptron for 
    a single epoch and returns the accuracy.  The trainingData
    is a dict of attributes sorted by actual classification.
    """
    global perceptrons
    correct = 0
    total = 0
    for digit, data in trainingData.items():
        for d in data:
            if str(digit) == key[0]:
                expected = -1
            elif str(digit) == key[1]:
                expected = 1
            else:
                break
            c = perceptrons[key].train(learningRate,d,expected)
            if c == expected:
                correct += 1
            total += 1
    return correct / total

def testPerceptrons(testData, key):
    """Runs the testData through the given perceptron and returns the accuracy
    and the number of classifications of each type
    """
    correct = 0
    total = 0
    for digit, data in testData.items():
        for d in data:
            if str(digit) == key[0]:
                expected = -1
            elif str(digit) == key[1]:
                expected = 1
            else:
                break
            c = perceptrons[key].train(learningRate,d,expected)
            if c == -1 and expected == -1:
                correct += 1
                output.confMat[key]['TN'] += 1
            elif c == -1 and expect == 1:
                output.confMat[key]['FP'] += 1
            if c == 1 and expected == 1:
                correct += 1
                output.confMat[key]['TP'] += 1
            elif c == 1 and expected == -1:
                output.confMat[key]['FN'] += 1
            total += 1
    return correct / total

def runTests():
    createPerceptrons()
    trainingData = getData('optdigits.train')
    for key in sorted(perceptrons.keys()):
        curAcc = runEpoch(trainingData, key)
        while curAcc > output.trainAcc[key]:

            output.trainAcc[key] = curAcc
            curAcc = runEpoch(trainingData, key)
            output.numEpochs[key] += 1
    testData = getData('optdigits.test')
    for key in sorted(perceptrons.keys()):
        output.testAcc[key] = testPerceptrons(testData, key)

if __name__ == "__main__":
    runTests()
    output.outputData()
